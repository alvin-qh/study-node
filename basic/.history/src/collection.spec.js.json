{
    "sourceFile": "src/collection.spec.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1687272601226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1687272607787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n /**\n  * 测试数组类型\n  */\n-describe(\"test type\", () => {\n+describe(\"test Array\", () => {\n   /**\n    * 测试 Boolean 类型\n    */\n   it(\"test 'Boolean' type\", () => {\n"
                },
                {
                    "date": 1687273232969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n /**\n  * 测试数组类型\n  */\n-describe(\"test Array\", () => {\n+describe(\"test Array type\", () => {\n   /**\n    * 测试 Boolean 类型\n    */\n-  it(\"test 'Boolean' type\", () => {\n+  it(\"should 'Boolean' type\", () => {\n     // 非空字符串表示的布尔类型\n     let b = Boolean(\"Hello\");\n     expect(b).to.be.true;\n \n"
                },
                {
                    "date": 1687273238492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n describe(\"test Array type\", () => {\n   /**\n    * 测试 Boolean 类型\n    */\n-  it(\"should 'Boolean' type\", () => {\n+  it(\"should check object is array\", () => {\n     // 非空字符串表示的布尔类型\n     let b = Boolean(\"Hello\");\n     expect(b).to.be.true;\n \n"
                },
                {
                    "date": 1687273256048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,11 @@\n describe(\"test Array type\", () => {\n   /**\n    * 测试 Boolean 类型\n    */\n-  it(\"should check object is array\", () => {\n+  it(\"should check object is Array\", () => {\n     // 非空字符串表示的布尔类型\n-    let b = Boolean(\"Hello\");\n+    let b = Array.isArray(null);\n     expect(b).to.be.true;\n \n     // 空字符串表示的布尔类型\n     b = Boolean(\"\");\n"
                },
                {
                    "date": 1687273275518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n   /**\n    * 测试 Boolean 类型\n    */\n   it(\"should check object is Array\", () => {\n-    // 非空字符串表示的布尔类型\n+    // null 值不是\n     let b = Array.isArray(null);\n     expect(b).to.be.true;\n \n     // 空字符串表示的布尔类型\n"
                },
                {
                    "date": 1687273281956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,11 @@\n   /**\n    * 测试 Boolean 类型\n    */\n   it(\"should check object is Array\", () => {\n-    // null 值不是\n+    // null 值不是数组\n     let b = Array.isArray(null);\n-    expect(b).to.be.true;\n+    expect(b).to.be.false;\n \n     // 空字符串表示的布尔类型\n     b = Boolean(\"\");\n     expect(b).to.be.false;\n"
                },
                {
                    "date": 1687273287093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,38 +8,6 @@\n   it(\"should check object is Array\", () => {\n     // null 值不是数组\n     let b = Array.isArray(null);\n     expect(b).to.be.false;\n-\n-    // 空字符串表示的布尔类型\n-    b = Boolean(\"\");\n-    expect(b).to.be.false;\n-\n-    // 非零数值表示的布尔类型\n-    b = Boolean(1);\n-    expect(b).to.be.true;\n-\n-    // 数值零表示的布尔类型\n-    b = Boolean(0);\n-    expect(b).to.be.false;\n-\n-    // 空数组表示的布尔类型, 注意: 空数组的布尔值为 true\n-    b = Boolean([]);\n-    expect(b).to.be.true;\n-\n-    // 对象数组表示的布尔类型, 注意: 对象数组的布尔值为 true\n-    b = Boolean({});\n-    expect(b).to.be.true;\n-\n-    // null 值表示的布尔类型\n-    b = Boolean(null);\n-    expect(b).to.be.false;\n-\n-    // NaN 值表示的布尔类型\n-    b = Boolean(NaN);\n-    expect(b).to.be.false;\n-\n-    // undefined 值表示的布尔类型\n-    b = Boolean(undefined);\n-    expect(b).to.be.false;\n   });\n });\n"
                },
                {
                    "date": 1687273326505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n /**\n  * 测试数组类型\n+describe(\"test Array type\", () => {\n  */\n-describe(\"test Array type\", () => {\n   /**\n    * 测试 Boolean 类型\n    */\n   it(\"should check object is Array\", () => {\n"
                },
                {
                    "date": 1687273332480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n /**\n  * 测试数组类型\n+ */\n describe(\"test Array type\", () => {\n- */\n   /**\n    * 测试 Boolean 类型\n    */\n   it(\"should check object is Array\", () => {\n"
                },
                {
                    "date": 1687273337986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+const { describe, it } = require(\"mocha\");\n+\n /**\n  * 测试数组类型\n  */\n describe(\"test Array type\", () => {\n"
                },
                {
                    "date": 1687273344030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+const { expect } = require(\"chai\");\n const { describe, it } = require(\"mocha\");\n \n /**\n  * 测试数组类型\n"
                },
                {
                    "date": 1687273369939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,6 +11,10 @@\n   it(\"should check object is Array\", () => {\n     // null 值不是数组\n     let b = Array.isArray(null);\n     expect(b).to.be.false;\n+\n+    // null 值不是数组\n+    let b = Array.isArray(null);\n+    expect(b).to.be.false;\n   });\n });\n"
                },
                {
                    "date": 1687273377785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,8 @@\n     let b = Array.isArray(null);\n     expect(b).to.be.false;\n \n     // null 值不是数组\n-    let b = Array.isArray(null);\n+    b = Array.isArray([]);\n     expect(b).to.be.false;\n   });\n });\n"
                },
                {
                    "date": 1687273394592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     // null 值不是数组\n     let b = Array.isArray(null);\n     expect(b).to.be.false;\n \n-    // null 值不是数组\n+    // \\ 值不是数组\n     b = Array.isArray([]);\n-    expect(b).to.be.false;\n+    expect(b).to.be.true;\n   });\n });\n"
                },
                {
                    "date": 1687273402470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,13 @@\n     // null 值不是数组\n     let b = Array.isArray(null);\n     expect(b).to.be.false;\n \n-    // \\ 值不是数组\n+    // [] 值不是数组\n     b = Array.isArray([]);\n     expect(b).to.be.true;\n+\n+    // [] 值不是数组\n+    b = Array.isArray([]);\n+    expect(b).to.be.true;\n   });\n });\n"
                },
                {
                    "date": 1687273412113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,13 +12,11 @@\n     // null 值不是数组\n     let b = Array.isArray(null);\n     expect(b).to.be.false;\n \n-    // [] 值不是数组\n-    b = Array.isArray([]);\n-    expect(b).to.be.true;\n+    \n \n     // [] 值不是数组\n-    b = Array.isArray([]);\n+    b = Array.isArray({});\n     expect(b).to.be.true;\n   });\n });\n"
                },
                {
                    "date": 1687273418201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,13 +8,16 @@\n   /**\n    * 测试 Boolean 类型\n    */\n   it(\"should check object is Array\", () => {\n+    // [] 值不是数组\n+    let b = Array.isArray([]);\n+    expect(b).to.be.true;\n+\n     // null 值不是数组\n-    let b = Array.isArray(null);\n+    b = Array.isArray(null);\n     expect(b).to.be.false;\n \n-    \n \n     // [] 值不是数组\n     b = Array.isArray({});\n     expect(b).to.be.true;\n"
                },
                {
                    "date": 1687273424501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,9 @@\n     // null 值不是数组\n     b = Array.isArray(null);\n     expect(b).to.be.false;\n \n-\n-    // [] 值不是数组\n+    //  值不是数组\n     b = Array.isArray({});\n     expect(b).to.be.true;\n   });\n });\n"
                },
                {
                    "date": 1687273429712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,17 +8,17 @@\n   /**\n    * 测试 Boolean 类型\n    */\n   it(\"should check object is Array\", () => {\n-    // [] 值不是数组\n+    // [] 值是数组\n     let b = Array.isArray([]);\n     expect(b).to.be.true;\n \n     // null 值不是数组\n     b = Array.isArray(null);\n     expect(b).to.be.false;\n \n-    //  值不是数组\n+    // {} 值不是数组\n     b = Array.isArray({});\n     expect(b).to.be.true;\n   });\n });\n"
                },
                {
                    "date": 1687273436008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,7 +18,7 @@\n     expect(b).to.be.false;\n \n     // {} 值不是数组\n     b = Array.isArray({});\n-    expect(b).to.be.true;\n+    expect(b).to.be.false;\n   });\n });\n"
                },
                {
                    "date": 1687273458925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,11 @@\n     // [] 值是数组\n     let b = Array.isArray([]);\n     expect(b).to.be.true;\n \n+    b = Array.isArray([]);\n+    expect(b).to.be.true;\n+\n     // null 值不是数组\n     b = Array.isArray(null);\n     expect(b).to.be.false;\n \n"
                },
                {
                    "date": 1687273472425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,10 @@\n     // [] 值是数组\n     let b = Array.isArray([]);\n     expect(b).to.be.true;\n \n-    b = Array.isArray([]);\n+    // \n+    b = Array.isArray([[], []]);\n     expect(b).to.be.true;\n \n     // null 值不是数组\n     b = Array.isArray(null);\n"
                },
                {
                    "date": 1687273478892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     // [] 值是数组\n     let b = Array.isArray([]);\n     expect(b).to.be.true;\n \n-    // \n+    // 嵌套数组仍是数组\n     b = Array.isArray([[], []]);\n     expect(b).to.be.true;\n \n     // null 值不是数组\n"
                },
                {
                    "date": 1687273505731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,5 +24,26 @@\n     // {} 值不是数组\n     b = Array.isArray({});\n     expect(b).to.be.false;\n   });\n+\n+  /**\n+   * 测试 Boolean 类型\n+   */\n+  it(\"should check object is Array\", () => {\n+    // [] 值是数组\n+    let b = Array.isArray([]);\n+    expect(b).to.be.true;\n+\n+    // 嵌套数组仍是数组\n+    b = Array.isArray([[], []]);\n+    expect(b).to.be.true;\n+\n+    // null 值不是数组\n+    b = Array.isArray(null);\n+    expect(b).to.be.false;\n+\n+    // {} 值不是数组\n+    b = Array.isArray({});\n+    expect(b).to.be.false;\n+  });\n });\n"
                },
                {
                    "date": 1687273511174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     expect(b).to.be.false;\n   });\n \n   /**\n-   * 测试 Boolean 类型\n+   * \n    */\n   it(\"should check object is Array\", () => {\n     // [] 值是数组\n     let b = Array.isArray([]);\n"
                },
                {
                    "date": 1687273517937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     expect(b).to.be.false;\n   });\n \n   /**\n-   * \n+   * 生成 Array 数组\n    */\n   it(\"should check object is Array\", () => {\n     // [] 值是数组\n     let b = Array.isArray([]);\n"
                },
                {
                    "date": 1687273523685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \n   /**\n    * 生成 Array 数组\n    */\n-  it(\"should m\", () => {\n+  it(\"should mak\", () => {\n     // [] 值是数组\n     let b = Array.isArray([]);\n     expect(b).to.be.true;\n \n"
                },
                {
                    "date": 1687273550316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n    */\n   it(\"should make Array\", () => {\n     // [] 值是数组\n     let a = Array.of(1, 2, 3);\n-    expect(b).to.be.true;\n+    expect(a).to.be.true;\n \n     // 嵌套数组仍是数组\n     b = Array.isArray([[], []]);\n     expect(b).to.be.true;\n"
                }
            ],
            "date": 1687272601226,
            "name": "Commit-0",
            "content": "/**\n * 测试数组类型\n */\ndescribe(\"test type\", () => {\n  /**\n   * 测试 Boolean 类型\n   */\n  it(\"test 'Boolean' type\", () => {\n    // 非空字符串表示的布尔类型\n    let b = Boolean(\"Hello\");\n    expect(b).to.be.true;\n\n    // 空字符串表示的布尔类型\n    b = Boolean(\"\");\n    expect(b).to.be.false;\n\n    // 非零数值表示的布尔类型\n    b = Boolean(1);\n    expect(b).to.be.true;\n\n    // 数值零表示的布尔类型\n    b = Boolean(0);\n    expect(b).to.be.false;\n\n    // 空数组表示的布尔类型, 注意: 空数组的布尔值为 true\n    b = Boolean([]);\n    expect(b).to.be.true;\n\n    // 对象数组表示的布尔类型, 注意: 对象数组的布尔值为 true\n    b = Boolean({});\n    expect(b).to.be.true;\n\n    // null 值表示的布尔类型\n    b = Boolean(null);\n    expect(b).to.be.false;\n\n    // NaN 值表示的布尔类型\n    b = Boolean(NaN);\n    expect(b).to.be.false;\n\n    // undefined 值表示的布尔类型\n    b = Boolean(undefined);\n    expect(b).to.be.false;\n  });\n});\n"
        }
    ]
}